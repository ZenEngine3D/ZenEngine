#pragma once
#if !defined(__zCore_Exp_Gfx_SerialGfxIndex_DX11_h__) && ZEN_EXPORT_OR_RESOURCE_DX11
#define __zCore_Exp_Gfx_SerialGfxIndex_DX11_h__

namespace zcExp
{	

class SerialGfxIndex_DX11 : public SerialIndex_Base
{
ZENClassDeclare(SerialGfxIndex_DX11, SerialIndex_Base)
//-------------------------------------------------------------------------------------------------
// Serialization and Asset creation support
//-------------------------------------------------------------------------------------------------
public:
	virtual bool				Serialize				( zcExp::Serializer_Base& _Serializer );
	struct SerialUseOnly
	{
		zArrayStatic<zU8>			maIndices;
	};
	
	SerialUseOnly				mSerial;
	D3D11_PRIMITIVE_TOPOLOGY	mePrimitiveType;	//!< Primitive type (TRIANGLELIST, TRIANGLESTRIP, ...)
	DXGI_FORMAT					meIndiceFormat;		//!< Indice size (DXGI_FORMAT_R16_UINT,DXGI_FORMAT_R32_UINT, ...)
	zU32							muIndiceCount;		//!< Number of indice in array (maIndices.Count/muIndiceSize)	
	zU16							muIndiceSize;		//!< Size of each indice (2Bytes, 4Bytes, ...)
	zU32							muPrimitiveCount;	//!< Number of primitives generated by indices

//-------------------------------------------------------------------------------------------------
// Export support section
//-------------------------------------------------------------------------------------------------
protected:	
	virtual bool				ExportWork(bool _bIsTHRTask);	
};

}

#endif