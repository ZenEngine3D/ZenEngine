#pragma once
#ifndef __zCore_Res_Gfx_GfxIndex_DX11_h__
#define __zCore_Res_Gfx_GfxIndex_DX11_h__

namespace zcRes
{

class GfxIndexProxy_DX11 : public zRefCountedAutoDel
{
ZENClassDeclare(GfxIndexProxy_DX11, zRefCountedAutoDel)
public:
											GfxIndexProxy_DX11();
	virtual									~GfxIndexProxy_DX11();												
	bool									Initialize(class GfxIndex& _Owner);
	zU8*									Lock();
	void									Unlock();

	ID3D11Buffer*							mpIndiceBuffer;
	D3D11_PRIMITIVE_TOPOLOGY				mePrimitiveType;	//!< Primitive type (TRIANGLELIST, TRIANGLESTRIP, ...)
	DXGI_FORMAT								meIndiceFormat;		//!< Indice size (DXGI_FORMAT_R16_UINT,DXGI_FORMAT_R32_UINT, ...)
	zU32									muIndiceCount;		//!< Number of indice in array (maIndices.Count/muIndiceSize)	
	zU16									muIndiceSize;		//!< Size of each indice (2Bytes, 4Bytes, ...)
	zU32									muPrimitiveCount;	//!< Number of primitives generated by indices
	ZENDbgCode(class GfxIndex*		mpOwner);
};

}

#endif