<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<!--################################################################################################
      Basic types
    ################################################################################################-->
  <Type Name="zen::zenType::zResID" >
    <DisplayString>{{ {meType,en} Name={mhName.muHash,H} }}</DisplayString>
    <Expand>
      <Item Name="mhName">mhName.muHash,H</Item>
      <Item Name="meType">meType</Item>
      <Item Name="mePlatform">mePlatform</Item>
      <Item Name="meSource">meSource</Item>
      <Item Name="muHashID">muHashID,H</Item>
    </Expand>
  </Type >
  
  <!--################################################################################################
      Ref pointers
    ################################################################################################-->
  <Type Name="RefPointed" >
    <AlternativeType Name="zen::zenType::zRefCounted"/>
    <DisplayString>{{ RefCount={miRefCount} }}</DisplayString>
  </Type >
  
  <Type Name="RefPointers" >
    <AlternativeType Name="zen::zenType::zEngineRef&lt;*&gt;"/>
    <AlternativeType Name="zen::zenType::zGameRef&lt;*&gt;"/>
        
    <DisplayString Condition="mpReference == nullptr">null</DisplayString>
    <DisplayString>{($T1*)mpReference,na}</DisplayString>
    <Expand >
      <ExpandedItem>($T1*)mpReference</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Resources" > 
    <AlternativeType Name="zen::zenRes::zResourceRef&lt;*,*,*&gt;"/>
    <AlternativeType Name="zen::zenRes::zResourceConstRef&lt;*,*,*&gt;"/>

    <DisplayString Condition="mpResource == nullptr">null</DisplayString>
    <DisplayString>{($T1*)mpResource,na} {mpResource->mResID.meType,en}</DisplayString>
    <Expand>
      <Item Name="[ResID]" Condition="mpResource != nullptr">mpResource->mResID</Item>
      <ExpandedItem Condition="mpResource != nullptr">($T1*)mpResource</ExpandedItem>      
    </Expand>
  </Type>

	<!--################################################################################################
      Arrays
    ################################################################################################-->
	<Type Name="Arrays" >
		<AlternativeType Name="zen::zenType::zArray&lt;*&gt;"/>
		<DisplayString Condition="mCount>5">{sizeof($T1)*mCount} Bytes, Num={mCount} [{mpData[0]},{mpData[1]},{mpData[2]},{mpData[3]},{mpData[4]}, ...]</DisplayString>
		<DisplayString Condition="mCount==5">{sizeof($T1)*mCount} Bytes, Num={mCount} [{mpData[0]},{mpData[1]},{mpData[2]},{mpData[3]},{mpData[4]}]</DisplayString>
		<DisplayString Condition="mCount==4">{sizeof($T1)*mCount} Bytes, Num={mCount} [{mpData[0]},{mpData[1]},{mpData[2]},{mpData[3]}]</DisplayString>
		<DisplayString Condition="mCount==3">{sizeof($T1)*mCount} Bytes, Num={mCount} [{mpData[0]},{mpData[1]},{mpData[2]}]</DisplayString>
		<DisplayString Condition="mCount==2">{sizeof($T1)*mCount} Bytes, Num={mCount} [{mpData[0]},{mpData[1]},]</DisplayString>
		<DisplayString Condition="mCount==1">{sizeof($T1)*mCount} Bytes, Num={mCount} [{mpData[0]}]</DisplayString>
		<DisplayString Condition="mCount==0">Empty</DisplayString>
		<Expand>
			<Item Name="[DataPtr]">mpData</Item>
			<!-- List Items 0-100 -->
			<ArrayItems>
				<Size Condition="mCount &lt; 100">mCount</Size>
				<Size>100</Size>
				<ValuePointer>mpData</ValuePointer>
			</ArrayItems>
			<!-- List Items 100-... -->
			<Synthetic Name="[100+]" Condition="mCount &gt;= 100">
				<DisplayString>[100-{mCount}]</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>mCount-100</Size>
						<LowerBound>100</LowerBound>
						<ValuePointer>mpData+100</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<!-- Array Iterators -->
	<Type Name="zen::zenType::zArray&lt;*&gt;::Iterator">
		<AlternativeType Name="zen::zenType::zArray&lt;*&gt;::IteratorConst"/>
		<DisplayString Condition="mIndex >= mArray.mCount">{{Invalid}}</DisplayString>
		<DisplayString>{mArray.mpData[mIndex]}</DisplayString>
	</Type>

<!--################################################################################################
      Intrusive Lists
    ################################################################################################-->
	<Type Name="zen::zenType::zList&lt;*,*,*&gt;">		
		<AlternativeType Name="zen::zenType::zListRef&lt;*,*,*&gt;"/>
		<DisplayString Condition="(((size_t)mRoot.mpPrev) &amp; ~0x01) == &amp;mRoot">{{Empty}}</DisplayString>
		<DisplayString Condition="mRoot.mpNext == mRoot.mpPrev">{{Size = 1}}</DisplayString>
		<DisplayString>{{Size = n}}</DisplayString>
		<Expand>
			<CustomListItems MaxItemsPerView="1024">
				<Variable Name="Offset" InitialValue="(size_t)&amp;(($T1*)0)->$T3::mLinks[$T2]" />
				<Variable Name="pLinkCur" InitialValue="(zen::zenType::zListLink*)((size_t)mRoot.mpNext &amp; ~0x01)" />
				<Loop>
					<If Condition="pLinkCur == &amp;mRoot">
						<Break/>
					</If>
					<Item>($T1*)((size_t)pLinkCur - Offset)</Item>
					<Exec>pLinkCur = pLinkCur->mpNext</Exec>
				</Loop>
			</CustomListItems>
		</Expand>
	</Type>

	<Type Name="zen::zenType::zList&lt;*,*,*&gt;::Iterator">
		<AlternativeType Name="zen::zenType::zList&lt;*,*,*&gt;::IteratorConst"/>
		<DisplayString Condition="mpCurrent == nullptr || ((unsigned int)mpCurrent->mpNext &amp; 0x01) != 0">{{Invalid}}</DisplayString>
		<DisplayString>{{Valid}}}</DisplayString>
		<Expand>
			<CustomListItems MaxItemsPerView="1" Condition="mpCurrent != nullptr &amp;&amp; ((unsigned int)mpCurrent->mpNext &amp; 0x01) == 0">
				<Variable Name="Offset" InitialValue="(size_t)&amp;(($T1*)0)->$T3::mLinks[$T2]" />
				<Item Name="Object">($T1*)((size_t)mpCurrent - Offset)</Item>
			</CustomListItems>
		</Expand>
	</Type>

	<Type Name="zen::zenType::zListLink">
		<Expand>
			<Item Name="mpPrev">(zen::zenType::zListLink*)((size_t)mpPrev &amp; ~0x01)</Item>
			<Item Name="mpNext">(zen::zenType::zListLink*)((size_t)mpNext &amp; ~0x01)</Item>
		</Expand>
	</Type>
</AutoVisualizer>